var c=Object.defineProperty;var d=(l,t,r)=>t in l?c(l,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):l[t]=r;var o=(l,t,r)=>(d(l,typeof t!="symbol"?t+"":t,r),r);class h{constructor(t){o(this,"supabase");o(this,"currentTrackingId");this.supabase=t,this.currentTrackingId=null}async add(t,r,e){const a=await this.checkSession();if(!a)return{data:null,error:"User not logged in"};const n=r.toISOString(),s=(e==null?void 0:e.toISOString())||null,{data:i,error:u}=await this.supabase.from("trackings").insert([{title:t,start:n,end:s,user:a==null?void 0:a.id}]);return i&&i.length==1?this.currentTrackingId=i[0].id:this.currentTrackingId=null,{data:i,error:u}}async start(t,r){return await this.add(t,r,null)}async stop(t){const r=await this.checkSession();if(!r)return{data:null,error:"User not logged in"};const e=t.toISOString(),{data:a,error:n}=await this.supabase.from("trackings").select("id").eq("user",r==null?void 0:r.id).is("end",null);if(a&&a.length==1){const{data:s,error:i}=await this.supabase.from("trackings").update({end:e}).eq("id",a[0].id);return s&&s.length==1?this.currentTrackingId=s[0].id:this.currentTrackingId=null,{data:s,error:i}}else return{data:null,error:"No tracking to stop"}}async getCurrentStartTime(){const t=await this.checkSession();if(!t)return{date:null,error:"User not logged in"};const{data:r,error:e}=await this.supabase.from("trackings").select("start").eq("user",t==null?void 0:t.id).is("end",null);return r&&r.length>0?{date:new Date(r[0].start),error:null}:{date:null,error:null}}async getCurrentTracking(){const t=await this.checkSession();if(!t)return{data:null,error:"User not logged in"};const{data:r,error:e}=await this.supabase.from("trackings").select().eq("user",t==null?void 0:t.id).is("end",null);return r&&r.length>0?{data:r[0],error:null}:{data:null,error:null}}async checkSession(){var e;const{data:t,error:r}=await this.supabase.auth.getSession();return t?(e=t.session)==null?void 0:e.user:!1}async update(t,r){var a;if(!await this.checkSession())return{data:null,error:"User not logged in"};if(r=r||this.currentTrackingId||((a=(await this.getCurrentTracking()).data)==null?void 0:a.id),r){const{data:n,error:s}=await this.supabase.from("trackings").update(t).eq("id",r);return{data:n,error:s}}else return{data:null,error:"No tracking to update"}}async getTitles(){const t=await this.checkSession();if(!t)return{data:null,error:"User not logged in"};const{data:r,error:e}=await this.supabase.from("titles").select("title, amount, last_use").eq("user",t==null?void 0:t.id);return r&&r.length>0?{data:r,error:null}:{data:null,error:null}}async getTrackingGroups(t=null){const r=await this.checkSession();if(!r)return{data:null,error:"User not logged in"};let e;if(t)e=t;else{const{data:n,error:s}=await this.supabase.from("trackings").select("title, start, end").eq("user",r==null?void 0:r.id).not("end","is",null).order("start",{ascending:!1});e=n}let a=[];if(e&&e.length>0){for(let n=0;n<e.length;n++){const s=e[n],i=e[n-1]||null;i&&s.title==i.title&&new Date(s.end).toLocaleDateString()==new Date(i.end).toLocaleDateString()?a[a.length-1].push(s):a.push([s])}return{data:a,error:null}}else return{data:null,error:null}}}export{h as T};
